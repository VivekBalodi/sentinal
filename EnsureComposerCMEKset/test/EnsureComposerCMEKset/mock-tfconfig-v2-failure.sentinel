import "strings"

providers = {
	"google": {
		"alias": "",
		"config": {
			"credentials": {
				"constant_value": null,
			},
			"project": {
				"references": [
					"var.project",
				],
			},
			"region": {
				"references": [
					"var.region",
				],
			},
			"zone": {
				"references": [
					"var.zone",
				],
			},
		},
		"module_address":      "",
		"name":                "google",
		"provider_config_key": "google",
		"version_constraint":  "",
	},
	"google-beta": {
		"alias": "",
		"config": {
			"credentials": {
				"constant_value": null,
			},
			"project": {
				"references": [
					"var.project",
				],
			},
			"region": {
				"references": [
					"var.region",
				],
			},
			"zone": {
				"references": [
					"var.zone",
				],
			},
		},
		"module_address":      "",
		"name":                "google-beta",
		"provider_config_key": "google-beta",
		"version_constraint":  "",
	},
	"random": {
		"alias":               "",
		"config":              {},
		"module_address":      "",
		"name":                "random",
		"provider_config_key": "random",
		"version_constraint":  "",
	},
}

resources = {
	"data.google_composer_image_versions.all": {
		"address": "data.google_composer_image_versions.all",
		"config": {
			"region": {
				"constant_value": "us-central1",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "all",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_composer_image_versions",
	},
	"data.google_project.composer-cmek": {
		"address":             "data.google_project.composer-cmek",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "composer-cmek",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_project",
	},
	"data.google_storage_project_service_account.storage_sa": {
		"address":             "data.google_storage_project_service_account.storage_sa",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "storage_sa",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_storage_project_service_account",
	},
	"google_composer_environment.composer_cmek": {
		"address": "google_composer_environment.composer_cmek",
		"config": {
			"config": [
				{
					"node_config": [
						{
							"machine_type": {
								"constant_value": "e2-medium",
							},
							"network": {
								"references": [
									"google_compute_network.private_network",
								],
							},
							"service_account": {
								"references": [
									"google_service_account.composer-cmek-servacc",
								],
							},
							"subnetwork": {
								"references": [
									"google_compute_subnetwork.poc-subnet",
								],
							},
							"zone": {
								"references": [
									"var.zone",
								],
							},
						},
					],
					"node_count": {
						"constant_value": 3,
					},
					"private_environment_config": [
						{
							"cloud_sql_ipv4_cidr_block": {
								"constant_value": "10.0.0.0/12",
							},
							"enable_private_endpoint": {
								"constant_value": true,
							},
							"master_ipv4_cidr_block": {
								"constant_value": "172.16.22.0/23",
							},
							"web_server_ipv4_cidr_block": {
								"constant_value": "172.31.244.0/24",
							},
						},
					],
					"software_config": [
						{
							"image_version": {
								"references": [
									"data.google_composer_image_versions.all",
								],
							},
						},
					],
					"web_server_network_access_control": [
						{
							"allowed_ip_range": [
								{
									"description": {
										"constant_value": "network1",
									},
									"value": {
										"constant_value": "10.0.0.0/8",
									},
								},
							],
						},
					],
				},
			],
			"name": {
				"references": [
					"local.composer_cmek",
				],
			},
			"region": {
				"constant_value": "us-central1",
			},
		},
		"count": {},
		"depends_on": [
			"google_project_service.enable_composer_api",
			"google_project_service.enable_cloudbilling_api",
			"google_kms_crypto_key_iam_binding.composer-cmek-servacc",
			"google_project_iam_member.composer-cmek-servacc-02",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "composer_cmek",
		"provider_config_key": "google-beta",
		"provisioners":        [],
		"type":                "google_composer_environment",
	},
	"google_compute_firewall.allow_ssh": {
		"address": "google_compute_firewall.allow_ssh",
		"config": {
			"allow": [
				{
					"ports": {
						"constant_value": [
							"22",
						],
					},
					"protocol": {
						"constant_value": "tcp",
					},
				},
			],
			"direction": {
				"constant_value": "INGRESS",
			},
			"name": {
				"references": [
					"var.branchname",
					"random_id.id",
				],
			},
			"network": {
				"references": [
					"google_compute_network.private_network",
				],
			},
			"target_tags": {
				"constant_value": [
					"ssh-enabled",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "allow_ssh",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_compute_firewall",
	},
	"google_compute_firewall.poc-firewall-rule": {
		"address": "google_compute_firewall.poc-firewall-rule",
		"config": {
			"allow": [
				{
					"ports": {
						"constant_value": [
							"22",
						],
					},
					"protocol": {
						"constant_value": "tcp",
					},
				},
			],
			"description": {
				"constant_value": "A firewall rule to allow SSH access from IAP  to all instances",
			},
			"name": {
				"references": [
					"var.branchname",
					"random_id.id",
				],
			},
			"network": {
				"references": [
					"google_compute_network.private_network",
				],
			},
			"source_ranges": {
				"constant_value": [
					"35.235.240.0/20",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "poc-firewall-rule",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_compute_firewall",
	},
	"google_compute_global_address.private_ip_address": {
		"address": "google_compute_global_address.private_ip_address",
		"config": {
			"address_type": {
				"constant_value": "INTERNAL",
			},
			"name": {
				"references": [
					"local.private_ip_name",
				],
			},
			"network": {
				"references": [
					"google_compute_network.private_network",
				],
			},
			"prefix_length": {
				"constant_value": 16,
			},
			"purpose": {
				"constant_value": "VPC_PEERING",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "private_ip_address",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_compute_global_address",
	},
	"google_compute_network.private_network": {
		"address": "google_compute_network.private_network",
		"config": {
			"auto_create_subnetworks": {
				"constant_value": "false",
			},
			"name": {
				"references": [
					"local.private_network_name",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "private_network",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_compute_network",
	},
	"google_compute_subnetwork.poc-subnet": {
		"address": "google_compute_subnetwork.poc-subnet",
		"config": {
			"description": {
				"constant_value": "The shared service subnetwork used for infrastructure",
			},
			"ip_cidr_range": {
				"constant_value": "10.3.0.0/19",
			},
			"name": {
				"references": [
					"local.private_subnetwork",
				],
			},
			"network": {
				"references": [
					"google_compute_network.private_network",
				],
			},
			"region": {
				"references": [
					"var.region",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "poc-subnet",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_compute_subnetwork",
	},
	"google_kms_crypto_key.composer-cmek-key": {
		"address": "google_kms_crypto_key.composer-cmek-key",
		"config": {
			"key_ring": {
				"references": [
					"google_kms_key_ring.composer-cmek-ring",
				],
			},
			"name": {
				"references": [
					"local.composer_cmek",
				],
			},
		},
		"count": {},
		"depends_on": [
			"google_kms_key_ring.composer-cmek-ring",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "composer-cmek-key",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_kms_crypto_key",
	},
	"google_kms_crypto_key_iam_binding.composer-cmek-servacc": {
		"address": "google_kms_crypto_key_iam_binding.composer-cmek-servacc",
		"config": {
			"crypto_key_id": {
				"references": [
					"google_kms_crypto_key.composer-cmek-key",
				],
			},
			"members": {
				"references": [
					"google_service_account.composer-cmek-servacc",
					"google_project_service_identity.composer_sa",
					"google_project_service_identity.artifactregistry_sa",
					"google_project_service_identity.container_sa",
					"google_project_service_identity.pubsub_sa",
					"data.google_storage_project_service_account.storage_sa",
					"data.google_project.composer-cmek",
				],
			},
			"role": {
				"constant_value": "roles/cloudkms.cryptoKeyEncrypterDecrypter",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "composer-cmek-servacc",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_kms_crypto_key_iam_binding",
	},
	"google_kms_key_ring.composer-cmek-ring": {
		"address": "google_kms_key_ring.composer-cmek-ring",
		"config": {
			"location": {
				"references": [
					"var.region",
				],
			},
			"name": {
				"references": [
					"local.composer_cmek",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "composer-cmek-ring",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_kms_key_ring",
	},
	"google_project_iam_member.composer-cmek-servacc-02": {
		"address": "google_project_iam_member.composer-cmek-servacc-02",
		"config": {
			"member": {
				"references": [
					"google_service_account.composer-cmek-servacc",
				],
			},
			"role": {
				"constant_value": "roles/composer.worker",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "composer-cmek-servacc-02",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_project_iam_member",
	},
	"google_project_service.enable_artifactregistry_api": {
		"address": "google_project_service.enable_artifactregistry_api",
		"config": {
			"disable_dependent_services": {
				"constant_value": true,
			},
			"disable_on_destroy": {
				"constant_value": false,
			},
			"project": {
				"references": [
					"var.project",
				],
			},
			"service": {
				"constant_value": "artifactregistry.googleapis.com",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "enable_artifactregistry_api",
		"provider_config_key": "google",
		"provisioners": [
			{
				"config": {
					"command": {
						"constant_value": "sleep 60",
					},
				},
				"index":            0,
				"resource_address": "google_project_service.enable_artifactregistry_api",
				"type":             "local-exec",
			},
		],
		"type": "google_project_service",
	},
	"google_project_service.enable_cloudbilling_api": {
		"address": "google_project_service.enable_cloudbilling_api",
		"config": {
			"disable_dependent_services": {
				"constant_value": true,
			},
			"disable_on_destroy": {
				"constant_value": false,
			},
			"project": {
				"references": [
					"var.project",
				],
			},
			"service": {
				"constant_value": "cloudbilling.googleapis.com",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "enable_cloudbilling_api",
		"provider_config_key": "google",
		"provisioners": [
			{
				"config": {
					"command": {
						"constant_value": "sleep 60",
					},
				},
				"index":            0,
				"resource_address": "google_project_service.enable_cloudbilling_api",
				"type":             "local-exec",
			},
		],
		"type": "google_project_service",
	},
	"google_project_service.enable_composer_api": {
		"address": "google_project_service.enable_composer_api",
		"config": {
			"disable_dependent_services": {
				"constant_value": true,
			},
			"disable_on_destroy": {
				"constant_value": false,
			},
			"project": {
				"references": [
					"var.project",
				],
			},
			"service": {
				"constant_value": "composer.googleapis.com",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "enable_composer_api",
		"provider_config_key": "google",
		"provisioners": [
			{
				"config": {
					"command": {
						"constant_value": "sleep 60",
					},
				},
				"index":            0,
				"resource_address": "google_project_service.enable_composer_api",
				"type":             "local-exec",
			},
		],
		"type": "google_project_service",
	},
	"google_project_service_identity.artifactregistry_sa": {
		"address": "google_project_service_identity.artifactregistry_sa",
		"config": {
			"project": {
				"references": [
					"var.project",
				],
			},
			"service": {
				"constant_value": "artifactregistry.googleapis.com",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "artifactregistry_sa",
		"provider_config_key": "google-beta",
		"provisioners":        [],
		"type":                "google_project_service_identity",
	},
	"google_project_service_identity.composer_sa": {
		"address": "google_project_service_identity.composer_sa",
		"config": {
			"project": {
				"references": [
					"var.project",
				],
			},
			"service": {
				"constant_value": "composer.googleapis.com",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "composer_sa",
		"provider_config_key": "google-beta",
		"provisioners":        [],
		"type":                "google_project_service_identity",
	},
	"google_project_service_identity.container_sa": {
		"address": "google_project_service_identity.container_sa",
		"config": {
			"project": {
				"references": [
					"var.project",
				],
			},
			"service": {
				"constant_value": "container.googleapis.com",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "container_sa",
		"provider_config_key": "google-beta",
		"provisioners":        [],
		"type":                "google_project_service_identity",
	},
	"google_project_service_identity.pubsub_sa": {
		"address": "google_project_service_identity.pubsub_sa",
		"config": {
			"project": {
				"references": [
					"var.project",
				],
			},
			"service": {
				"constant_value": "pubsub.googleapis.com",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "pubsub_sa",
		"provider_config_key": "google-beta",
		"provisioners":        [],
		"type":                "google_project_service_identity",
	},
	"google_service_account.composer-cmek-servacc": {
		"address": "google_service_account.composer-cmek-servacc",
		"config": {
			"account_id": {
				"references": [
					"local.composer_cmek",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "composer-cmek-servacc",
		"provider_config_key": "google",
		"provisioners":        [],
		"type":                "google_service_account",
	},
	"google_service_networking_connection.private_vpc_connection": {
		"address": "google_service_networking_connection.private_vpc_connection",
		"config": {
			"network": {
				"references": [
					"google_compute_network.private_network",
				],
			},
			"reserved_peering_ranges": {
				"references": [
					"google_compute_global_address.private_ip_address",
				],
			},
			"service": {
				"constant_value": "servicenetworking.googleapis.com",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "private_vpc_connection",
		"provider_config_key": "google-beta",
		"provisioners":        [],
		"type":                "google_service_networking_connection",
	},
	"random_id.id": {
		"address": "random_id.id",
		"config": {
			"byte_length": {
				"constant_value": 8,
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "id",
		"provider_config_key": "random",
		"provisioners":        [],
		"type":                "random_id",
	},
}

provisioners = {
	"google_project_service.enable_artifactregistry_api:0": {
		"config": {
			"command": {
				"constant_value": "sleep 60",
			},
		},
		"index":            0,
		"resource_address": "google_project_service.enable_artifactregistry_api",
		"type":             "local-exec",
	},
	"google_project_service.enable_cloudbilling_api:0": {
		"config": {
			"command": {
				"constant_value": "sleep 60",
			},
		},
		"index":            0,
		"resource_address": "google_project_service.enable_cloudbilling_api",
		"type":             "local-exec",
	},
	"google_project_service.enable_composer_api:0": {
		"config": {
			"command": {
				"constant_value": "sleep 60",
			},
		},
		"index":            0,
		"resource_address": "google_project_service.enable_composer_api",
		"type":             "local-exec",
	},
}

variables = {
	"branchname": {
		"default":        "release",
		"description":    "Branch name for testing",
		"module_address": "",
		"name":           "branchname",
	},
	"name_prefix": {
		"default":        "sentinel",
		"description":    "The name prefix for the database instance. Will be appended with a random string. Use lowercase letters, numbers, and hyphens. Start with a letter.",
		"module_address": "",
		"name":           "name_prefix",
	},
	"project": {
		"default":        "asha-301615",
		"description":    "The project ID to host the database in.",
		"module_address": "",
		"name":           "project",
	},
	"region": {
		"default":        "us-central1",
		"description":    "The region to host the database in.",
		"module_address": "",
		"name":           "region",
	},
	"zone": {
		"default":        "us-central1-a",
		"description":    "The zoneto host the database in.",
		"module_address": "",
		"name":           "zone",
	},
}

outputs = {}

module_calls = {}

strip_index = func(addr) {
	s = strings.split(addr, ".")
	for s as i, v {
		s[i] = strings.split(v, "[")[0]
	}

	return strings.join(s, ".")
}
