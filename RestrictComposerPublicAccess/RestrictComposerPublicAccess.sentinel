/*# this policy uses the sentinel tfplan/v2 import for terraform
import "tfplan/v2" as tfplan
import "strings"
import "types"

print ("Policy Validation Rule - Restrict public access to Cloud Composer")

allComposerResources = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.type is "google_composer_environment" and
		resource_changes.mode is "managed" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"])
}

deny_ConfigBlockMissing = rule {
	all allComposerResources as _, rc {
		keys(rc.change.after) contains "config"
	}
}

deny_PrivEnvConfigBlockMissing = rule when deny_ConfigBlockMissing is true {
	all allComposerResources as _, rc {
		all rc.change.after.config as _, sp {
			keys(sp) contains "private_environment_config"
		}
	}
}

RestrictComposerPublicAccess_rule = rule when deny_PrivEnvConfigBlockMissing is true {
	all allComposerResources as _, rc {
		all rc.change.after.config as _, sp {
		    all sp.private_environment_config as _,ep {
			ep contains "enable_private_endpoint" and 
				ep.enable_private_endpoint is true
		}
	}
 }
}

v = strings.split(tfplan.terraform_version, ".")
version_major = int(v[1])
version_minor = int(v[2])

main = rule {
	deny_ConfigBlockMissing and
	deny_PrivEnvConfigBlockMissing and
	RestrictComposerPublicAccess_rule and
	version_major >= 13 and
	version_minor >= 0
}
*/

#RestrictComposerPublicAccess
import "tfplan-functions" as plan

Validation = true

allComposerResources = tfplan.find_resources("google_composer_environment")

Restrictenable_private_endpoint_rule = plan.filter_attribute_is_not_value ( allComposerResources, "config.0.private_environment_config.0.enable_private_endpoint", true , true)

if length(Restrictenable_private_endpoint_rule["messages"]) > 0 {
   Validated = false
  
} 

main = rule {
  Validated
}